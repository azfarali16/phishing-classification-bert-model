{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9999396,"sourceType":"datasetVersion","datasetId":6154717},{"sourceId":10210103,"sourceType":"datasetVersion","datasetId":6310328}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport re\nimport time\nimport shutil\n\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:37.475014Z","iopub.execute_input":"2025-01-25T08:06:37.475249Z","iopub.status.idle":"2025-01-25T08:06:37.790995Z","shell.execute_reply.started":"2025-01-25T08:06:37.475222Z","shell.execute_reply":"2025-01-25T08:06:37.790175Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/phishing-dataset/combined_data.csv\n/kaggle/input/modified-dataset/modified_dataset.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/phishing-dataset/combined_data.csv\",dtype={6: str})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:37.792510Z","iopub.execute_input":"2025-01-25T08:06:37.792852Z","iopub.status.idle":"2025-01-25T08:06:44.551098Z","shell.execute_reply.started":"2025-01-25T08:06:37.792826Z","shell.execute_reply":"2025-01-25T08:06:44.550182Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"data.dtypes","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.552196Z","iopub.execute_input":"2025-01-25T08:06:44.552464Z","iopub.status.idle":"2025-01-25T08:06:44.562840Z","shell.execute_reply.started":"2025-01-25T08:06:44.552437Z","shell.execute_reply":"2025-01-25T08:06:44.562003Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"sender      object\nreceiver    object\ndate        object\nsubject     object\nbody        object\nlabel        int64\nurls        object\ndtype: object"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"data['text'] = data['subject']+\" \" + data['body']\n\ncols_to_keep = ['text','label']\ndata = data[cols_to_keep]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.563917Z","iopub.execute_input":"2025-01-25T08:06:44.564173Z","iopub.status.idle":"2025-01-25T08:06:44.937010Z","shell.execute_reply.started":"2025-01-25T08:06:44.564150Z","shell.execute_reply":"2025-01-25T08:06:44.936149Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"data.isna().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.938158Z","iopub.execute_input":"2025-01-25T08:06:44.938430Z","iopub.status.idle":"2025-01-25T08:06:44.953500Z","shell.execute_reply.started":"2025-01-25T08:06:44.938401Z","shell.execute_reply":"2025-01-25T08:06:44.952797Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"text     952\nlabel      0\ndtype: int64"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"data.dropna(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.954637Z","iopub.execute_input":"2025-01-25T08:06:44.954956Z","iopub.status.idle":"2025-01-25T08:06:44.977490Z","shell.execute_reply.started":"2025-01-25T08:06:44.954920Z","shell.execute_reply":"2025-01-25T08:06:44.976835Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"# data_subset = data.sample(n=3000)\n\ndata_subset = data","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.980088Z","iopub.execute_input":"2025-01-25T08:06:44.980311Z","iopub.status.idle":"2025-01-25T08:06:44.983768Z","shell.execute_reply.started":"2025-01-25T08:06:44.980282Z","shell.execute_reply":"2025-01-25T08:06:44.982859Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"data_subset.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.984823Z","iopub.execute_input":"2025-01-25T08:06:44.985025Z","iopub.status.idle":"2025-01-25T08:06:44.995654Z","shell.execute_reply.started":"2025-01-25T08:06:44.985004Z","shell.execute_reply":"2025-01-25T08:06:44.994756Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"(144686, 2)"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"### TEXT PREPROCESSING","metadata":{"jp-MarkdownHeadingCollapsed":true}},{"cell_type":"markdown","source":"# ENGLISH ONLY","metadata":{}},{"cell_type":"code","source":"# !pip install langdetect","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:44.996677Z","iopub.execute_input":"2025-01-25T08:06:44.996909Z","iopub.status.idle":"2025-01-25T08:06:45.004496Z","shell.execute_reply.started":"2025-01-25T08:06:44.996886Z","shell.execute_reply":"2025-01-25T08:06:45.003935Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"\n# import logging\n# from langdetect import detect, LangDetectException\n\n# def is_english(text):\n#     try:\n#         if len(text.strip()) == 0:\n#             raise ValueError(\"Text is empty or too short to detect language\")\n        \n\n#         return detect(text) == 'en'\n#     except LangDetectException:\n#         print(\"Error: Unable to detect language for following text.\")\n#         print(text)\n#         return False \n#     except ValueError as e:\n#         print(f\"Error: {e}\")\n#         return False\n\n# data_subset['is_english'] = data_subset['text'].apply(is_english)\n# print('done!')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:45.005423Z","iopub.execute_input":"2025-01-25T08:06:45.005762Z","iopub.status.idle":"2025-01-25T08:06:45.017987Z","shell.execute_reply.started":"2025-01-25T08:06:45.005736Z","shell.execute_reply":"2025-01-25T08:06:45.017188Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/modified-dataset/modified_dataset.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:45.018945Z","iopub.execute_input":"2025-01-25T08:06:45.019189Z","iopub.status.idle":"2025-01-25T08:06:50.453486Z","shell.execute_reply.started":"2025-01-25T08:06:45.019166Z","shell.execute_reply":"2025-01-25T08:06:50.452329Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"df = df[df['is_english']==True]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:50.455144Z","iopub.execute_input":"2025-01-25T08:06:50.456404Z","iopub.status.idle":"2025-01-25T08:06:50.470152Z","shell.execute_reply.started":"2025-01-25T08:06:50.456352Z","shell.execute_reply":"2025-01-25T08:06:50.469012Z"}},"outputs":[],"execution_count":12},{"cell_type":"code","source":"def clean_email_text(text):\n    text = text.lower()\n\n    #remove re:\n    text = re.sub(r're:','',text,flags=re.IGNORECASE)\n    \n    # htmltags\n    text = re.sub(r'<.*?>', '', text, flags=re.IGNORECASE)\n    #url\n    text = re.sub(r'http[s]?://\\S+|www\\.\\S+|/[\\w/.-]+', '<link>', text, flags=re.IGNORECASE)\n    \n    #email\n    text = text.replace('[@]', '@').replace('[dot]', '.',)\n    text = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '<email>', text, flags=re.IGNORECASE)\n    \n    #signoff\n    text = re.sub(r'\\b(best regards|regards|sincerely|thanks|thank you|kind regards|warm regards|best wishes|yours truly|yours sincerely|with appreciation|with best wishes|cheers|all the best|take care|thanks in advance|many thanks|looking forward to hearing from you|best|warmly|thanks again|gratefully|respectfully|have a great day|until next time|peace)[\\s\\S]*$', '', text, flags=re.IGNORECASE)\n    \n    #removing everything but alphanumeric..\n    # text = re.sub(r'[^a-zA-Z0-9\\s.,]|<link>|<email>', '', text)\n    # text = re.sub(r'(?!(<link>|<email>))[^a-zA-Z0-9\\s.,]', '', text, flags=re.IGNORECASE)\n\n    text = re.sub('<link>','linkplaceholer',text, flags=re.IGNORECASE)\n    text = re.sub('<email>','emailplaceholer',text, flags=re.IGNORECASE)\n    \n    text = re.sub(r'[^a-zA-Z0-9\\s.,]', '', text, flags=re.IGNORECASE)\n    \n    text = re.sub('linkplaceholer','<link>',text, flags=re.IGNORECASE)\n    text = re.sub('emailplaceholer','<email>',text, flags=re.IGNORECASE)\n\n\n    \n    #removing whitespaces\n    text = re.sub(r'\\s+', ' ', text, flags=re.IGNORECASE).strip()\n    \n\n    return text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:50.471471Z","iopub.execute_input":"2025-01-25T08:06:50.472258Z","iopub.status.idle":"2025-01-25T08:06:50.479989Z","shell.execute_reply.started":"2025-01-25T08:06:50.472216Z","shell.execute_reply":"2025-01-25T08:06:50.479216Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"df['text'] = df['text'].apply(clean_email_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:06:50.480888Z","iopub.execute_input":"2025-01-25T08:06:50.481103Z","iopub.status.idle":"2025-01-25T08:07:55.180444Z","shell.execute_reply.started":"2025-01-25T08:06:50.481080Z","shell.execute_reply":"2025-01-25T08:07:55.179765Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:07:55.181932Z","iopub.execute_input":"2025-01-25T08:07:55.182166Z","iopub.status.idle":"2025-01-25T08:07:55.193323Z","shell.execute_reply.started":"2025-01-25T08:07:55.182143Z","shell.execute_reply":"2025-01-25T08:07:55.192419Z"}},"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"                                                text  label  is_english\n0  never agree to be a loser buck up, your troubl...      1        True\n1  befriend jenna jameson upgrade your sex and pl...      1        True\n2  cnn.com daily top 10 the daily top 10 from cnn...      1        True\n3  svn commit r619753 in <link> lib<link> lib<lin...      0        True\n4  specialpricespharmmoreinfo welcomefastshipping...      1        True","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n      <th>is_english</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>never agree to be a loser buck up, your troubl...</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>befriend jenna jameson upgrade your sex and pl...</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cnn.com daily top 10 the daily top 10 from cnn...</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>svn commit r619753 in &lt;link&gt; lib&lt;link&gt; lib&lt;lin...</td>\n      <td>0</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>specialpricespharmmoreinfo welcomefastshipping...</td>\n      <td>1</td>\n      <td>True</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":15},{"cell_type":"code","source":"df = df.drop_duplicates(subset='text')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:07:55.194344Z","iopub.execute_input":"2025-01-25T08:07:55.194675Z","iopub.status.idle":"2025-01-25T08:07:55.321382Z","shell.execute_reply.started":"2025-01-25T08:07:55.194640Z","shell.execute_reply":"2025-01-25T08:07:55.320546Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# df = df.sample(3000)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:07:55.322459Z","iopub.execute_input":"2025-01-25T08:07:55.322800Z","iopub.status.idle":"2025-01-25T08:07:55.329407Z","shell.execute_reply.started":"2025-01-25T08:07:55.322765Z","shell.execute_reply":"2025-01-25T08:07:55.328650Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"## FINETUNING","metadata":{}},{"cell_type":"code","source":"!pip install transformers torch evaluate peft","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:07:55.330297Z","iopub.execute_input":"2025-01-25T08:07:55.330600Z","iopub.status.idle":"2025-01-25T08:08:05.164225Z","shell.execute_reply.started":"2025-01-25T08:07:55.330564Z","shell.execute_reply":"2025-01-25T08:08:05.163138Z"}},"outputs":[{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.45.1)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\nCollecting evaluate\n  Downloading evaluate-0.4.3-py3-none-any.whl.metadata (9.2 kB)\nCollecting peft\n  Downloading peft-0.14.0-py3-none-any.whl.metadata (13 kB)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.15.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.25.1)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.5)\nRequirement already satisfied: tokenizers<0.21,>=0.20 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.20.0)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.3)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\nRequirement already satisfied: datasets>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from evaluate) (3.0.1)\nRequirement already satisfied: dill in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.3.8)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (from evaluate) (2.2.2)\nRequirement already satisfied: xxhash in /opt/conda/lib/python3.10/site-packages (from evaluate) (3.4.1)\nRequirement already satisfied: multiprocess in /opt/conda/lib/python3.10/site-packages (from evaluate) (0.70.16)\nRequirement already satisfied: psutil in /opt/conda/lib/python3.10/site-packages (from peft) (5.9.3)\nRequirement already satisfied: accelerate>=0.21.0 in /opt/conda/lib/python3.10/site-packages (from peft) (0.34.2)\nRequirement already satisfied: pyarrow>=15.0.0 in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (16.1.0)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from datasets>=2.0.0->evaluate) (3.9.5)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.8.30)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas->evaluate) (2024.1)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (1.9.4)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->datasets>=2.0.0->evaluate) (4.0.3)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas->evaluate) (1.16.0)\nDownloading evaluate-0.4.3-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.0/84.0 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading peft-0.14.0-py3-none-any.whl (374 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m374.8/374.8 kB\u001b[0m \u001b[31m15.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: peft, evaluate\nSuccessfully installed evaluate-0.4.3 peft-0.14.0\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"df = df[df['text'].str.len() >= 20]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:05.165864Z","iopub.execute_input":"2025-01-25T08:08:05.166775Z","iopub.status.idle":"2025-01-25T08:08:05.285119Z","shell.execute_reply.started":"2025-01-25T08:08:05.166731Z","shell.execute_reply":"2025-01-25T08:08:05.284468Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import DataLoader, Dataset\nimport torch.nn.functional as F\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport evaluate\n\nfrom peft import PeftModel, PeftConfig, LoraConfig, get_peft_model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:05.286117Z","iopub.execute_input":"2025-01-25T08:08:05.286395Z","iopub.status.idle":"2025-01-25T08:08:23.568305Z","shell.execute_reply.started":"2025-01-25T08:08:05.286368Z","shell.execute_reply":"2025-01-25T08:08:23.567650Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"model_path = 'bert-base-uncased'\n\n\nid2label_={0: \"NOT-PHISHING\", 1: \"PHISHING\"}\nlabel2id_={\"NOT-PHISHING\": 0, \"PHISHING\":1}\n\nmodel = AutoModelForSequenceClassification.from_pretrained(model_path, num_labels=2,id2label=id2label_,label2id=label2id_)\ntokenizer = AutoTokenizer.from_pretrained(model_path)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:23.569206Z","iopub.execute_input":"2025-01-25T08:08:23.569726Z","iopub.status.idle":"2025-01-25T08:08:27.530206Z","shell.execute_reply.started":"2025-01-25T08:08:23.569697Z","shell.execute_reply":"2025-01-25T08:08:27.529204Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1c20bbc8d6c4470b87b6cdc5b5927257"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ab708ddd254b4082a901b9ccacbbf93b"}},"metadata":{}},{"name":"stderr","text":"Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"605daf45835b4fdea60b987fbdba2745"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b7e498be3e6a4f7c82ac0d6cbe83f090"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"96701e8933504cf8a0c0548ea2892ad2"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1617: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be deprecated in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"}],"execution_count":21},{"cell_type":"markdown","source":"## custom class","metadata":{"execution":{"iopub.status.busy":"2024-12-15T10:30:36.678352Z","iopub.execute_input":"2024-12-15T10:30:36.678744Z","iopub.status.idle":"2024-12-15T10:30:36.684499Z","shell.execute_reply.started":"2024-12-15T10:30:36.678711Z","shell.execute_reply":"2024-12-15T10:30:36.682969Z"}}},{"cell_type":"code","source":"class PhishingDataset(Dataset):\n\n    def __init__(self,texts,lables,tokenizer,max_length=256):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n\n    def __len__(self):\n        return len(self.texts)\n\n    def __getitem__(self,idx):\n        text = self.texts[idx]\n        label = self.labels[idx]\n\n        encoding = self.tokenizer.encode_plus(\n            text,\n            add_special_tokens=True,\n            max_length=self.max_length,\n            padding='max_length',\n            truncation=True,\n            return_tensors='pt'\n        )\n\n        return {\n            'input_ids': encoding['input_ids'].flatten(),\n            'attention_mask': encoding['attention_mask'].flatten(),\n            'labels':  torch.tensor(label) \n        }\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:27.533650Z","iopub.execute_input":"2025-01-25T08:08:27.533933Z","iopub.status.idle":"2025-01-25T08:08:27.540053Z","shell.execute_reply.started":"2025-01-25T08:08:27.533906Z","shell.execute_reply":"2025-01-25T08:08:27.539138Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"## dataset creations","metadata":{}},{"cell_type":"code","source":"texts = df['text'].tolist()\nlabels = df['label'].tolist()\n\n\n\n#spliting train 80% test 10% val 10%\ntrain_texts, temp_texts, train_labels, temp_labels = train_test_split(texts, labels, test_size=0.2, random_state=42)\nval_texts, test_texts, val_labels, test_labels = train_test_split(temp_texts, temp_labels, test_size=0.5, random_state=42)\n\n#creating datasetclass\ntrain_dataset = PhishingDataset(train_texts, train_labels, tokenizer, max_length=256)\nval_dataset = PhishingDataset(val_texts, val_labels, tokenizer, max_length=256)\ntest_dataset = PhishingDataset(test_texts, test_labels, tokenizer, max_length=256)\n\n#creating batches = 32\n# train_dataloader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n# val_dataloader = DataLoader(val_dataset, batch_size=32)\n# test_dataloader = DataLoader(test_dataset, batch_size=32)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:27.541371Z","iopub.execute_input":"2025-01-25T08:08:27.541644Z","iopub.status.idle":"2025-01-25T08:08:27.633214Z","shell.execute_reply.started":"2025-01-25T08:08:27.541592Z","shell.execute_reply":"2025-01-25T08:08:27.632545Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"accuracy = evaluate.load(\"accuracy\")\nauc_score = evaluate.load(\"roc_auc\")\nf1 = evaluate.load('f1')\nprecision = evaluate.load('precision')\nrecall = evaluate.load('recall')\n\n\ndef compute_softmax(logits):\n    e_x = np.exp(logits - np.max(logits, axis=1, keepdims=True))\n    softmax_predictions = e_x / e_x.sum(axis=1, keepdims=True)\n    return softmax_predictions\n\ndef compute_metrics(pred):\n    logits, labels = pred\n\n    probabilities = compute_softmax(logits)\n    positive_class_probs = probabilities[: , 1]\n    auc_ = np.round(auc_score.compute(prediction_scores=positive_class_probs, references=labels)['roc_auc'], 3)\n\n    \n    predictions = np.argmax(probabilities, axis=1)\n    accuracy_ = np.round(accuracy.compute(predictions=predictions, references=labels)['accuracy'], 3)\n    f1_ = np.round(f1.compute(predictions=predictions, references=labels)['f1'], 3)\n    precision_ = np.round(precision.compute(predictions=predictions, references=labels)['precision'], 3)\n    recall_ = np.round(recall.compute(predictions=predictions, references=labels)['recall'], 3)\n\n    return {\n        'accuracy': accuracy_,\n        'f1': f1_,\n        'auc': auc_,\n        'precision': precision_,\n        'recall': recall_\n    }","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:27.635310Z","iopub.execute_input":"2025-01-25T08:08:27.635868Z","iopub.status.idle":"2025-01-25T08:08:30.649462Z","shell.execute_reply.started":"2025-01-25T08:08:27.635826Z","shell.execute_reply":"2025-01-25T08:08:30.648645Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/4.20k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"029c436e703f44b794d0db1fb677a275"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/9.54k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1fb9056483e846b6bfb8395c2555f0a3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/6.79k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"33d24e468d564918b4e428f7561d5ab5"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/7.56k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ba064f5bee6f4d8b8ce1893416bce02b"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Downloading builder script:   0%|          | 0.00/7.38k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ed7709c9b7cb4cca97cafc44a3d2beb4"}},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"## Freezing all but pooler layers params\n\n#freezing\nfor name, params in model.base_model.named_parameters():\n    params.requires_grade = False\n\n#unfreezing\nfor name, params in model.base_model.named_parameters():\n    if \"pooler\" in name:\n        params.requires_grade = True","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:30.650387Z","iopub.execute_input":"2025-01-25T08:08:30.650667Z","iopub.status.idle":"2025-01-25T08:08:30.656224Z","shell.execute_reply.started":"2025-01-25T08:08:30.650630Z","shell.execute_reply":"2025-01-25T08:08:30.655355Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# import torch_xla.core.xla_model as xm\nbatch_size = 32\nepochs = 5\nlr = 2e-5\n\n# Check if GPU is available\ndevice = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n\n# If using CPU, switch to TPU device\n# if device == \"cpu\":\n#     device = xm.xla_device()  \n\nif device == 'cpu':\n    raise ValueError('CPU is getting selected not recommended')\n\nmodel.to(device)\nprint(f\"Model is running on: {device}\")\n\n\ntraining_args = TrainingArguments(\n    output_dir='./results',\n    run_name='subset_train',\n    num_train_epochs = epochs,\n    per_device_train_batch_size=batch_size,  \n    per_device_eval_batch_size=8,\n    learning_rate= lr,               \n    logging_strategy= \"epoch\",\n    eval_strategy=\"epoch\",  \n    save_strategy= \"epoch\",\n    # gradient_accumulation_steps=4,\n    load_best_model_at_end = True,\n    \n)\n\ntrainer = Trainer(\n    model = model,\n    args = training_args,\n    tokenizer = tokenizer,\n    train_dataset=train_dataset,\n    eval_dataset=val_dataset,\n    compute_metrics=compute_metrics\n    \n)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:30.657542Z","iopub.execute_input":"2025-01-25T08:08:30.658166Z","iopub.status.idle":"2025-01-25T08:08:32.069445Z","shell.execute_reply.started":"2025-01-25T08:08:30.658128Z","shell.execute_reply":"2025-01-25T08:08:32.068782Z"}},"outputs":[{"name":"stdout","text":"Model is running on: cuda\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"import time\n\nt1 = time.time()\ntrainer.train()\nt2 = time.time()\n\ntime_taken_minutes = round((t2 - t1) / 60, 2)\ntime_taken_hours = round(time_taken_minutes / 60, 2)\n\nprint(f\"Tuning Time: {time_taken_hours} hours\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-25T08:08:32.070461Z","iopub.execute_input":"2025-01-25T08:08:32.070740Z","execution_failed":"2025-01-25T14:01:20.003Z"}},"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend. Please refer to https://wandb.me/wandb-core for more information.\n\u001b[34m\u001b[1mwandb\u001b[0m: Logging into wandb.ai. (Learn how to deploy a W&B server locally: https://wandb.me/wandb-server)\n\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit:","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"  ········\n"},{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"VBox(children=(Label(value='Waiting for wandb.init()...\\r'), FloatProgress(value=0.011113671622221469, max=1.0…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d41af76afc1946bbb37a76439b38a244"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.18.3"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20250125_081754-xcx7nkbj</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Syncing run <strong><a href='https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface/runs/xcx7nkbj' target=\"_blank\">subset_train</a></strong> to <a href='https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface' target=\"_blank\">Weights & Biases</a> (<a href='https://wandb.me/run' target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View project at <a href='https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface' target=\"_blank\">https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":" View run at <a href='https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface/runs/xcx7nkbj' target=\"_blank\">https://wandb.ai/azfarali007-aa-ned-university-of-engineering-and-technology/huggingface/runs/xcx7nkbj</a>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='8682' max='15575' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [ 8682/15575 1:58:13 < 1:33:52, 1.22 it/s, Epoch 2.79/5]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n      <th>Auc</th>\n      <th>Precision</th>\n      <th>Recall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.695000</td>\n      <td>0.692991</td>\n      <td>0.514000</td>\n      <td>0.299000</td>\n      <td>0.503000</td>\n      <td>0.475000</td>\n      <td>0.218000</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.694000</td>\n      <td>0.691970</td>\n      <td>0.525000</td>\n      <td>0.000000</td>\n      <td>0.497000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"data_subset['label'].value_counts()","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.003Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# model.save_pretrained('./saved_model')\n# tokenizer.save_pretrained('./saved_model')","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# from transformers import pipeline\n\n# phishing_pipe = pipeline('text-classification', model=model, tokenizer=tokenizer)\n\n# def predict_phishing(text):\n#     result = phishing_pipe(text)\n#     # print(result)\n#     return result[0]['label'], result[0]['score']","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# pred = trainer.predict(test_dataset)\n\n# compute_metrics((pred.predictions,pred.label_ids))\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# for i in len(df):\n#     result = predict_phishing(df.iloc[i]['text'])\n#     if res    ","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":" # predict_phishing(df.iloc[4]['text'])","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# import shutil\n\n# # Path to the folder where the model is saved\n# model_folder = './saved_model'\n\n# # Create a zip file for the folder\n# shutil.make_archive('saved_model', 'zip', model_folder)\n","metadata":{"trusted":true,"execution":{"execution_failed":"2025-01-25T14:01:20.004Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# OTHER WAY","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport re\nimport time\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n\nimport tensorflow as tf\nfrom transformers import BertTokenizer, TFBertForSequenceClassification\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:09:12.781161Z","iopub.execute_input":"2025-01-26T20:09:12.781709Z","iopub.status.idle":"2025-01-26T20:09:13.125405Z","shell.execute_reply.started":"2025-01-26T20:09:12.781656Z","shell.execute_reply":"2025-01-26T20:09:13.123989Z"}},"outputs":[],"execution_count":44},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/modified-dataset/modified_dataset.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:05:40.461283Z","iopub.execute_input":"2025-01-26T20:05:40.462232Z","iopub.status.idle":"2025-01-26T20:05:43.812242Z","shell.execute_reply.started":"2025-01-26T20:05:40.462182Z","shell.execute_reply":"2025-01-26T20:05:43.811115Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"df[df['is_english'] == True]\ndf.drop(columns = ['is_english'],inplace=True)\ndf.drop_duplicates(inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:05:43.814013Z","iopub.execute_input":"2025-01-26T20:05:43.814346Z","iopub.status.idle":"2025-01-26T20:05:44.630397Z","shell.execute_reply.started":"2025-01-26T20:05:43.814316Z","shell.execute_reply":"2025-01-26T20:05:44.629476Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"(df['label'].value_counts()/df.shape[0]) * 100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:07:11.712624Z","iopub.execute_input":"2025-01-26T20:07:11.713895Z","iopub.status.idle":"2025-01-26T20:07:11.725444Z","shell.execute_reply.started":"2025-01-26T20:07:11.713851Z","shell.execute_reply":"2025-01-26T20:07:11.724321Z"}},"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"label\n1    52.298821\n0    47.701179\nName: count, dtype: float64"},"metadata":{}}],"execution_count":37},{"cell_type":"code","source":"df['length'] = df['text'].str.len()\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:07:39.443931Z","iopub.execute_input":"2025-01-26T20:07:39.444332Z","iopub.status.idle":"2025-01-26T20:07:39.525177Z","shell.execute_reply.started":"2025-01-26T20:07:39.444298Z","shell.execute_reply":"2025-01-26T20:07:39.524010Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"                                                     text  label  length\n0       Never agree to be a loser Buck up, your troubl...      1     299\n1       Befriend Jenna Jameson \\nUpgrade your sex and ...      1     105\n2       CNN.com Daily Top 10 >+=+=+=+=+=+=+=+=+=+=+=+=...      1    3939\n3       Re: svn commit: r619753 - in /spamassassin/tru...      0   24569\n4       SpecialPricesPharmMoreinfo \\nWelcomeFastShippi...      1     202\n...                                                   ...    ...     ...\n144681  Job: just for you. \\n\\n\\n\\nWhile      we  may ...      1    4784\n144682  the reply for your request for a job place [le...      1    4957\n144683  Re: [R] Me again, about the horrible documenta...      0    2605\n144684  Re: [R] RODBC problem Hello,\\n\\nas I wrote I c...      0    2215\n144685  I wanted the desk at his own laws: of the.  Bu...      1    3111\n\n[136831 rows x 3 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n      <th>length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Never agree to be a loser Buck up, your troubl...</td>\n      <td>1</td>\n      <td>299</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Befriend Jenna Jameson \\nUpgrade your sex and ...</td>\n      <td>1</td>\n      <td>105</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CNN.com Daily Top 10 &gt;+=+=+=+=+=+=+=+=+=+=+=+=...</td>\n      <td>1</td>\n      <td>3939</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Re: svn commit: r619753 - in /spamassassin/tru...</td>\n      <td>0</td>\n      <td>24569</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>SpecialPricesPharmMoreinfo \\nWelcomeFastShippi...</td>\n      <td>1</td>\n      <td>202</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>144681</th>\n      <td>Job: just for you. \\n\\n\\n\\nWhile      we  may ...</td>\n      <td>1</td>\n      <td>4784</td>\n    </tr>\n    <tr>\n      <th>144682</th>\n      <td>the reply for your request for a job place [le...</td>\n      <td>1</td>\n      <td>4957</td>\n    </tr>\n    <tr>\n      <th>144683</th>\n      <td>Re: [R] Me again, about the horrible documenta...</td>\n      <td>0</td>\n      <td>2605</td>\n    </tr>\n    <tr>\n      <th>144684</th>\n      <td>Re: [R] RODBC problem Hello,\\n\\nas I wrote I c...</td>\n      <td>0</td>\n      <td>2215</td>\n    </tr>\n    <tr>\n      <th>144685</th>\n      <td>I wanted the desk at his own laws: of the.  Bu...</td>\n      <td>1</td>\n      <td>3111</td>\n    </tr>\n  </tbody>\n</table>\n<p>136831 rows × 3 columns</p>\n</div>"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"plt.hist(df['length'])\nplt.title('Word length Histogram')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:09:47.161292Z","iopub.execute_input":"2025-01-26T20:09:47.162032Z","iopub.status.idle":"2025-01-26T20:09:47.418819Z","shell.execute_reply.started":"2025-01-26T20:09:47.161981Z","shell.execute_reply":"2025-01-26T20:09:47.417606Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":45},{"cell_type":"code","source":"sns.histplot(df['length'],kde=True)\nplt.title('Word length Histogram (KDE)')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:10:13.605461Z","iopub.execute_input":"2025-01-26T20:10:13.605889Z","iopub.status.idle":"2025-01-26T20:11:56.600087Z","shell.execute_reply.started":"2025-01-26T20:10:13.605852Z","shell.execute_reply":"2025-01-26T20:11:56.598781Z"}},"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"df['length'].min(), df['length'].median(), df['length'].max()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:31:55.587500Z","iopub.execute_input":"2025-01-26T20:31:55.588611Z","iopub.status.idle":"2025-01-26T20:31:55.599526Z","shell.execute_reply.started":"2025-01-26T20:31:55.588539Z","shell.execute_reply":"2025-01-26T20:31:55.598330Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"(4, 863.0, 4599694)"},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def clean_email_text(text):\n    text = text.lower()\n\n    #remove re:\n    text = re.sub(r're:','',text,flags=re.IGNORECASE)\n    \n    # htmltags\n    text = re.sub(r'<.*?>', '', text, flags=re.IGNORECASE)\n    #url\n    text = re.sub(r'http[s]?://\\S+|www\\.\\S+|/[\\w/.-]+', '<link>', text, flags=re.IGNORECASE)\n    \n    #email\n    text = text.replace('[@]', '@').replace('[dot]', '.',)\n    text = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '<email>', text, flags=re.IGNORECASE)\n    \n    # signoff\n    text = re.sub(r'\\b(best regards|regards|sincerely|thank you|kind regards|warm regards|best wishes|yours truly|yours sincerely|with appreciation|respectfully|have a great day|until next time|peace),[\\s\\S]*$', '', text, flags=re.IGNORECASE)\n    \n    #removing everything but alphanumeric..\n    # text = re.sub(r'[^a-zA-Z0-9\\s.,]|<link>|<email>', '', text)\n    # text = re.sub(r'(?!(<link>|<email>))[^a-zA-Z0-9\\s.,]', '', text, flags=re.IGNORECASE)\n\n    text = re.sub('<link>','linkplaceholder',text, flags=re.IGNORECASE)\n    text = re.sub('<email>','emailplaceholder',text, flags=re.IGNORECASE)\n    \n    text = re.sub(r'[^a-zA-Z0-9\\s.,]', '', text, flags=re.IGNORECASE)\n    \n    text = re.sub('linkplaceholder','<link>',text, flags=re.IGNORECASE)\n    text = re.sub('emailplaceholder','<email>',text, flags=re.IGNORECASE)\n\n\n    \n    #removing whitespaces\n    text = re.sub(r'\\s+', ' ', text, flags=re.IGNORECASE).strip()\n    \n\n    return text","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:47:40.227187Z","iopub.execute_input":"2025-01-26T20:47:40.227630Z","iopub.status.idle":"2025-01-26T20:47:40.236871Z","shell.execute_reply.started":"2025-01-26T20:47:40.227594Z","shell.execute_reply":"2025-01-26T20:47:40.235593Z"}},"outputs":[],"execution_count":88},{"cell_type":"code","source":"df['text'] = df['text'].apply(clean_email_text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:47:42.060777Z","iopub.execute_input":"2025-01-26T20:47:42.061180Z","iopub.status.idle":"2025-01-26T20:48:45.165704Z","shell.execute_reply.started":"2025-01-26T20:47:42.061130Z","shell.execute_reply":"2025-01-26T20:48:45.164563Z"}},"outputs":[],"execution_count":89},{"cell_type":"code","source":"df['after_len'] = df['text'].str.len()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:48:45.167427Z","iopub.execute_input":"2025-01-26T20:48:45.167782Z","iopub.status.idle":"2025-01-26T20:48:45.253271Z","shell.execute_reply.started":"2025-01-26T20:48:45.167749Z","shell.execute_reply":"2025-01-26T20:48:45.252188Z"}},"outputs":[],"execution_count":90},{"cell_type":"code","source":"df.reset_index(inplace=True,drop=True)\ndf","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:48:45.254940Z","iopub.execute_input":"2025-01-26T20:48:45.255513Z","iopub.status.idle":"2025-01-26T20:48:45.271105Z","shell.execute_reply.started":"2025-01-26T20:48:45.255464Z","shell.execute_reply":"2025-01-26T20:48:45.269816Z"}},"outputs":[{"execution_count":91,"output_type":"execute_result","data":{"text/plain":"                                                     text  label  length  \\\n0       never agree to be a loser buck up, your troubl...      1     299   \n1       befriend jenna jameson upgrade your sex and pl...      1     105   \n2       cnn.com daily top 10 the daily top 10 from cnn...      1    3939   \n3       svn commit r619753 in lib lib t would anyone o...      0   24569   \n4       specialpricespharmmoreinfo welcomefastshipping...      1     202   \n...                                                   ...    ...     ...   \n136826  job just for you. while we may have high expec...      1    4784   \n136827  the reply for your request for a job place let...      1    4957   \n136828  r me again, about the horrible documentation o...      0    2605   \n136829  r rodbc problem hello, as i wrote i call sqlfe...      0    2215   \n136830  i wanted the desk at his own laws of the. but ...      1    3111   \n\n        after_len  \n0             273  \n1              75  \n2            1437  \n3            7553  \n4              61  \n...           ...  \n136826       1988  \n136827       2039  \n136828       1504  \n136829        164  \n136830       2593  \n\n[136831 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n      <th>length</th>\n      <th>after_len</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>never agree to be a loser buck up, your troubl...</td>\n      <td>1</td>\n      <td>299</td>\n      <td>273</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>befriend jenna jameson upgrade your sex and pl...</td>\n      <td>1</td>\n      <td>105</td>\n      <td>75</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>cnn.com daily top 10 the daily top 10 from cnn...</td>\n      <td>1</td>\n      <td>3939</td>\n      <td>1437</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>svn commit r619753 in lib lib t would anyone o...</td>\n      <td>0</td>\n      <td>24569</td>\n      <td>7553</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>specialpricespharmmoreinfo welcomefastshipping...</td>\n      <td>1</td>\n      <td>202</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>136826</th>\n      <td>job just for you. while we may have high expec...</td>\n      <td>1</td>\n      <td>4784</td>\n      <td>1988</td>\n    </tr>\n    <tr>\n      <th>136827</th>\n      <td>the reply for your request for a job place let...</td>\n      <td>1</td>\n      <td>4957</td>\n      <td>2039</td>\n    </tr>\n    <tr>\n      <th>136828</th>\n      <td>r me again, about the horrible documentation o...</td>\n      <td>0</td>\n      <td>2605</td>\n      <td>1504</td>\n    </tr>\n    <tr>\n      <th>136829</th>\n      <td>r rodbc problem hello, as i wrote i call sqlfe...</td>\n      <td>0</td>\n      <td>2215</td>\n      <td>164</td>\n    </tr>\n    <tr>\n      <th>136830</th>\n      <td>i wanted the desk at his own laws of the. but ...</td>\n      <td>1</td>\n      <td>3111</td>\n      <td>2593</td>\n    </tr>\n  </tbody>\n</table>\n<p>136831 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":91},{"cell_type":"code","source":"df['length'].min(), df['length'].median(), df['length'].max()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:50:47.125458Z","iopub.execute_input":"2025-01-26T20:50:47.125874Z","iopub.status.idle":"2025-01-26T20:50:47.138756Z","shell.execute_reply.started":"2025-01-26T20:50:47.125837Z","shell.execute_reply":"2025-01-26T20:50:47.137506Z"}},"outputs":[{"execution_count":93,"output_type":"execute_result","data":{"text/plain":"(4, 863.0, 4599694)"},"metadata":{}}],"execution_count":93},{"cell_type":"code","source":"df.iloc[136827]['text']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:51:39.867235Z","iopub.execute_input":"2025-01-26T20:51:39.867640Z","iopub.status.idle":"2025-01-26T20:51:39.874864Z","shell.execute_reply.started":"2025-01-26T20:51:39.867606Z","shell.execute_reply":"2025-01-26T20:51:39.873761Z"}},"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"'the reply for your request for a job place letter id z008219343975za while we may have high expectations of our associates, we also give them high rewards. imagine being part of a stable organization with a sterling reputation a place where the sydney car centre is an integral part of all that we do. with our car centre personality, youll not just succeed youll thrive. and, with our strong commitment to promoting from within, youll definitely enjoy your rise to the top. today the sydney car centre is looking for an industrious regional assistant to fasten the process of the delivery of customer payments to the suppliers. the position offered is a parttime job, and will only require from you to be available for 12 hours a day. as a regional assistant, you will be supposed to operate with the payments from those customers, based in your country. you will be expected to accept 23 transactions to your bank account every week, make certain calculations about every transaction you will be precisely instructed about it, transfer the funds to the suppliers by means of western union gram less your fee the charges of the western union gram. you will be continuously communicating with the manager from the head office, who will instruct you give advice regarding every new payment. the ideal candidate will be industrious, goaloriented person, with the availability of a personal bank account suitable to be used for the company needs. knowledge of english, computer literacy and sociability are appreciated. the company guarantees to pay net 10 fee out of the amount of every payment you dealt with and to provide you with the regular income flexible schedule. all the related expenses you might have like the western union gram chargers, related expenses on traveling are covered by the company. the more detailed information is available on our website where you can fill in the online application form for this position. we would be glad to welcome you in our team we are looking forward to hearing from you as soon as possible'"},"metadata":{}}],"execution_count":94},{"cell_type":"code","source":"df = df[df['text'] != \"\"]\ndf.drop_duplicates(inplace=True)\ndf.drop_duplicates(subset=['text'],inplace=True)\ndf.reset_index(inplace = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:55:12.008683Z","iopub.execute_input":"2025-01-26T20:55:12.009172Z","iopub.status.idle":"2025-01-26T20:55:12.566401Z","shell.execute_reply.started":"2025-01-26T20:55:12.009124Z","shell.execute_reply":"2025-01-26T20:55:12.565271Z"}},"outputs":[],"execution_count":106},{"cell_type":"code","source":"(df['label'].value_counts()/df.shape[0])*100","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-26T20:56:09.100817Z","iopub.execute_input":"2025-01-26T20:56:09.101215Z","iopub.status.idle":"2025-01-26T20:56:09.111332Z","shell.execute_reply.started":"2025-01-26T20:56:09.101179Z","shell.execute_reply":"2025-01-26T20:56:09.110139Z"}},"outputs":[{"execution_count":109,"output_type":"execute_result","data":{"text/plain":"label\n1    50.07422\n0    49.92578\nName: count, dtype: float64"},"metadata":{}}],"execution_count":109},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}